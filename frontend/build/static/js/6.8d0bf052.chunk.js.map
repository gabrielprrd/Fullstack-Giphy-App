{"version":3,"sources":["components/Form/Input.js","pages/Signin/index.js"],"names":["Input","name","rest","inputRef","useRef","useField","fieldName","registerField","error","useEffect","ref","current","path","Signin","formRef","history","useHistory","data","a","schema","Yup","shape","required","email","password","min","validate","abortEarly","handleRegistration","axios","method","url","sendWelcomeEmail","showModal","Swal","fire","icon","title","text","setTimeout","push","window","location","reload","errorMessages","inner","forEach","message","setErrors","onSubmit","htmlFor","type","to"],"mappings":"2KAGe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,KAASC,EAAQ,wBACzCC,EAAWC,iBAAO,MADuB,EAEHC,YAASJ,GAA7CK,EAFuC,EAEvCA,UAAWC,EAF4B,EAE5BA,cAAeC,EAFa,EAEbA,MASlC,OAPAC,qBAAU,WACRF,EAAc,CACZN,KAAMK,EACNI,IAAKP,EAASQ,QACdC,KAAM,YAEP,CAACN,EAAWC,IAEb,oCACE,2CAAWL,EAAX,CAAiBQ,IAAKP,KACrBK,GAAS,8BAAOA,M,6MCKR,SAASK,IACtB,IAAMC,EAAUV,iBAAO,MACjBW,EAAUC,cAFe,4CAI/B,WAA4BC,GAA5B,uBAAAC,EAAA,sEAGUC,EAASC,MAAaC,MAAM,CAChCpB,KAAMmB,MAAaE,SAAS,oBAC5BC,MAAOH,MACJG,MAAM,sBACND,SAAS,qBACZE,SAAUJ,MACPK,IAAI,EAAG,2BACPH,SAAS,0BAVlB,SAcUH,EAAOO,SAAST,EAAM,CAC1BU,YAAY,IAflB,cAmBUC,EAAqB,SAACX,GAC1BY,IAAM,CACJC,OAAQ,OACRC,IAAK,uCACLd,KAAMA,KAvBd,SA0BUW,EAAmBX,GA1B7B,cA6BUe,EAAmB,SAACf,GACxBY,IAAM,CACJC,OAAQ,OACRC,IAAK,sCACLd,KAAMA,KAjCd,UAoCUe,EAAiBf,GApC3B,eAuCUgB,EAAY,WAChBC,IAAKC,KAAK,CACRC,KAAM,UACNC,MAAO,yBACPC,KAAM,yCA3Cd,UA8CUL,IA9CV,yBAiDUM,YAAW,WACfxB,EAAQyB,KAAK,KACbC,OAAOC,SAASC,WACf,KApDP,0DAsDQ,gBAAevB,MACXwB,EAAgB,GAEtB,KAAIC,MAAMC,SAAQ,SAACtC,GACjBoC,EAAcpC,EAAMI,MAAQJ,EAAMuC,WAGpCjC,EAAQH,QAAQqC,UAAUJ,IA7DhC,2DAJ+B,sBAqE/B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOlC,IAAKI,EAASmC,SAvEM,6CAwEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,QAAQ,QAAhB,SACA,kBAAC,IAAD,CAAOjD,KAAK,UAGd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQiD,QAAQ,SAAhB,UACA,kBAAC,IAAD,CAAOC,KAAK,QAAQlD,KAAK,WAG3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQiD,QAAQ,YAAhB,aACA,kBAAC,IAAD,CAAOC,KAAK,WAAWlD,KAAK,cAG9B,kBAAC,IAAD,CAASkD,KAAK,UAAd,YAGF,kBAAC,IAAD,WACK,kBAAC,IAAD,CAASC,GAAG,UAAZ,SADL","file":"static/js/6.8d0bf052.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\n\nexport default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n  return (\n    <>\n      <input {...rest} ref={inputRef} />\n      {error && <span>{error}</span>}\n    </>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\n// Components\nimport Input from \"../../components/Form/Input\";\n\n// Styles\nimport {\n  SButton,\n  SLabel,\n  SForm,\n  SLoginSigninSuggestion,\n} from \"../../assets/globalStyles/globalStyles\";\n\nimport {\n  SContainer,\n  SInnerFormContainer,\n} from \"../../assets/globalStyles/containers\";\n\nexport default function Signin() {\n  const formRef = useRef(null);\n  const history = useHistory();\n\n  async function handleSubmit(data) {\n    try {\n      // Form validation\n      const schema = Yup.object().shape({\n        name: Yup.string().required(\"Name is required\"),\n        email: Yup.string()\n          .email(\"Type a valid email\")\n          .required(\"Email is required\"),\n        password: Yup.string()\n          .min(6, \"Minimum of 6 characters\")\n          .required(\"Password is required\"),\n      });\n\n      // Validates the whole schema at once, showing multiple errors when necessary\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Sends data to backend\n      const handleRegistration = (data) => {\n        axios({\n          method: \"post\",\n          url: \"http://localhost:5000/auth/register/\",\n          data: data,\n        });\n      };\n      await handleRegistration(data);\n\n      // Sends a welcome email to the user after registration\n      const sendWelcomeEmail = (data) => {\n        axios({\n          method: \"post\",\n          url: \"http://localhost:5000/welcome_email\",\n          data: data,\n        });\n      };\n      await sendWelcomeEmail(data);\n\n      // Tells registration was successfull\n      const showModal = () => {\n        Swal.fire({\n          icon: \"success\",\n          title: \"Registration complete!\",\n          text: \"Now you can save your favorite gifs\",\n        });\n      };\n      await showModal();\n\n      // Sends user to home page and refresh it after signin after 3 seconds\n      await setTimeout(() => {\n        history.push(\"/\");\n        window.location.reload();\n      }, 5000);\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errorMessages = {};\n\n        err.inner.forEach((error) => {\n          errorMessages[error.path] = error.message;\n        });\n\n        formRef.current.setErrors(errorMessages);\n      }\n    }\n  }\n  return (\n    <SContainer>\n      <SForm ref={formRef} onSubmit={handleSubmit}>\n        <SInnerFormContainer>\n          <SLabel htmlFor=\"name\">Name:</SLabel>\n          <Input name=\"name\" />\n        </SInnerFormContainer>\n\n        <SInnerFormContainer>\n          <SLabel htmlFor=\"email\">Email:</SLabel>\n          <Input type=\"email\" name=\"email\" />\n        </SInnerFormContainer>\n\n        <SInnerFormContainer>\n          <SLabel htmlFor=\"password\">Password:</SLabel>\n          <Input type=\"password\" name=\"password\" />\n        </SInnerFormContainer>\n\n        <SButton type=\"submit\">Sign in</SButton>\n      </SForm>\n\n      <SLoginSigninSuggestion>\n        Or <NavLink to=\"/login\">login</NavLink> if you already have an account.\n      </SLoginSigninSuggestion>\n    </SContainer>\n  );\n}\n"],"sourceRoot":""}