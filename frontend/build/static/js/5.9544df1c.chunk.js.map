{"version":3,"sources":["components/Form/Input.js","pages/Login/index.js"],"names":["Input","name","rest","inputRef","useRef","useField","fieldName","registerField","error","useEffect","ref","current","path","Login","props","from","location","state","pathname","formRef","useContext","AuthContext","user","isAuth","history","useHistory","data","a","reset","schema","Yup","shape","email","required","password","min","validate","abortEarly","axios","method","url","loginFailed","Swal","fire","icon","title","push","setTimeout","window","reload","handleAuthentication","setErrors","to","errorMessages","inner","forEach","message","onSubmit","htmlFor","type"],"mappings":"2KAGe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,KAASC,EAAQ,wBACzCC,EAAWC,iBAAO,MADuB,EAEHC,YAASJ,GAA7CK,EAFuC,EAEvCA,UAAWC,EAF4B,EAE5BA,cAAeC,EAFa,EAEbA,MASlC,OAPAC,qBAAU,WACRF,EAAc,CACZN,KAAMK,EACNI,IAAKP,EAASQ,QACdC,KAAM,YAEP,CAACN,EAAWC,IAEb,oCACE,2CAAWL,EAAX,CAAiBQ,IAAKP,KACrBK,GAAS,8BAAOA,M,qNCOR,SAASK,EAAMC,GAAQ,IAC5BC,GAASD,EAAME,SAASC,OAAS,CAAEF,KAAM,CAAEG,SAAU,OAArDH,KACFI,EAAUf,iBAAO,MAFY,EAGVgB,qBAAWC,KAA5BC,EAH2B,EAG3BA,KAAMC,EAHqB,EAGrBA,OACRC,EAAUC,cAJmB,4CAMnC,WAA4BC,EAA5B,sBAAAC,EAAA,6DAAoCC,EAApC,EAAoCA,MAApC,SAGUC,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJE,MAAM,sBACNC,SAAS,qBACZC,SAAUJ,MACPK,IAAI,EAAG,2BACPF,SAAS,0BATlB,SAaUJ,EAAOO,SAASV,EAAM,CAC1BW,YAAY,IAdlB,6CAAAV,EAAA,MAkBiC,WAAOD,GAAP,SAAAC,EAAA,sEACNW,IAAM,CACzBC,OAAQ,OACRC,IAAK,2CACLd,KAAMA,IAJmB,cAOdA,KAAKe,YAChBC,IAAKC,KAAK,CACRC,KAAM,QACNC,MAAO,6BAGTH,IAAKC,KAAK,CACRC,KAAM,UACNC,MAAO,qBAETrB,EAAQsB,KAAK,KACbC,YAAW,WACTC,OAAOhC,SAASiC,WACf,OApBsB,2CAlBjC,qDAyCIC,CAAqBxB,GAGrBP,EAAQR,QAAQwC,UAAU,IAC1BvB,IA7CJ,kBAgDW,kBAAC,IAAD,CAAUwB,GAAIrC,KAhDzB,kCAkDQ,gBAAee,MACXuB,EAAgB,GAEtB,KAAIC,MAAMC,SAAQ,SAAC/C,GACjB6C,EAAc7C,EAAMI,MAAQJ,EAAMgD,WAGpCrC,EAAQR,QAAQwC,UAAUE,IAzDhC,2DANmC,sBAqEnC,OACE,kBAAC,IAAD,KACG9B,EACC,wCAAcD,EAAKrB,KAAnB,sBAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,IAAKS,EAASsC,SA3EM,+CA4EzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,QAAQ,SAAhB,UACA,kBAAC,IAAD,CAAOC,KAAK,QAAQ1D,KAAK,WAE3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQyD,QAAQ,YAAhB,aACA,kBAAC,IAAD,CAAOC,KAAK,WAAW1D,KAAK,cAE9B,kBAAC,IAAD,CAAS0D,KAAK,UAAd,WAEF,kBAAC,IAAD,+BACyB,kBAAC,IAAD,CAASP,GAAG,WAAZ","file":"static/js/5.9544df1c.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\n\nexport default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n  return (\n    <>\n      <input {...rest} ref={inputRef} />\n      {error && <span>{error}</span>}\n    </>\n  );\n}\n","import React, { useRef, useContext } from \"react\";\nimport { NavLink, Redirect, useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\n// Context\nimport { AuthContext } from \"../../store/AuthProvider\";\n\n// Components\nimport Input from \"../../components/Form/Input\";\n\n// Styles\nimport {\n  SButton,\n  SLabel,\n  SForm,\n  SLoginSigninSuggestion,\n} from \"../../assets/globalStyles/globalStyles\";\nimport {\n  SContainer,\n  SInnerFormContainer,\n} from \"../../assets/globalStyles/containers\";\n\nexport default function Login(props) {\n  const { from } = props.location.state || { from: { pathname: \"/\" } };\n  const formRef = useRef(null);\n  const { user, isAuth } = useContext(AuthContext);\n  const history = useHistory();\n\n  async function handleSubmit(data, { reset }) {\n    try {\n      // Form validation\n      const schema = Yup.object().shape({\n        email: Yup.string()\n          .email(\"Type a valid email\")\n          .required(\"Email is required\"),\n        password: Yup.string()\n          .min(6, \"Minimum of 6 characters\")\n          .required(\"Password is required\"),\n      });\n\n      // Validates the whole schema at once, showing multiple errors when necessary\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      // Sends data to backend as a post request\n      const handleAuthentication = async (data) => {\n        let response = await axios({\n          method: \"post\",\n          url: \"http://localhost:5000/auth/authenticate/\",\n          data: data,\n        });\n\n        if (response.data.loginFailed) {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Wrong login or password\",\n          });\n        } else {\n          Swal.fire({\n            icon: \"success\",\n            title: \"You're logged in\",\n          });\n          history.push(\"/\");\n          setTimeout(() => {\n            window.location.reload();\n          }, 1500);\n        }\n      };\n      handleAuthentication(data);\n\n      // If every input is valid, cleans the error messages and input fields\n      formRef.current.setErrors({});\n      reset();\n\n      // If user is not authorized, redirects to login page\n      return <Redirect to={from} />;\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errorMessages = {};\n\n        err.inner.forEach((error) => {\n          errorMessages[error.path] = error.message;\n        });\n\n        formRef.current.setErrors(errorMessages);\n      }\n    }\n  }\n\n  // Only shows the form if user is logged out\n  return (\n    <SContainer>\n      {isAuth ? (\n        <h1>Welcome, {user.name}! You're logged in</h1>\n      ) : (\n        <SContainer>\n          <SForm ref={formRef} onSubmit={handleSubmit}>\n            <SInnerFormContainer>\n              <SLabel htmlFor=\"email\">Email:</SLabel>\n              <Input type=\"email\" name=\"email\" />\n            </SInnerFormContainer>\n            <SInnerFormContainer>\n              <SLabel htmlFor=\"password\">Password:</SLabel>\n              <Input type=\"password\" name=\"password\" />\n            </SInnerFormContainer>\n            <SButton type=\"submit\">Log in</SButton>\n          </SForm>\n          <SLoginSigninSuggestion>\n            Don't have an account? <NavLink to=\"/signin\">Signin</NavLink>\n          </SLoginSigninSuggestion>\n        </SContainer>\n      )}\n    </SContainer>\n  );\n}\n"],"sourceRoot":""}