{"version":3,"sources":["components/Form/Input.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Home/GifsResult/styles.js","pages/Home/GifsResult/index.js","pages/Home/styles.js","pages/Home/index.js"],"names":["Input","name","rest","inputRef","useRef","useField","fieldName","registerField","error","useEffect","ref","current","path","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","SGifContainer","styled","div","device","tablet","SNoResultsFound","SSaveButton","SButton","GifsResult","reqStatus","query","select","useContext","GifsContext","gifs","setGifs","AuthContext","isAuth","user","useState","fetchedIncrementer","setFetchedIncrementer","currentGif","setCurrentGif","incrementer","showMoreGifs","a","axios","method","url","data","response","handleAjaxRequest","err","console","log","length","map","item","key","id","src","images","fixed_height","alt","title","onClick","isGifRepeated","forEach","gif","Swal","fire","_id","saveGif","role","aria-label","to","showShowMoreGifsButton","SGhostForm","SGhostButton","isfocused","SForm","Form","SSelect","SInput","SGhostBody","Home","formRef","setQuery","setReqStatus","setSelect","isFocused","setFocus","reset","Yup","shape","required","toggleFocus","onFocus","onBlur","className","onSubmit","action","placeholder","onChange","e","imgType","target","value","type"],"mappings":"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","file":"static/js/4.3e184095.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\n\nexport default function Input({ name, ...rest }) {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n  return (\n    <>\n      <input {...rest} ref={inputRef} />\n      {error && <span>{error}</span>}\n    </>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from \"styled-components\";\nimport { device } from \"../../../assets/globalStyles/device\";\nimport { SButton } from \"../../../assets/globalStyles/globalStyles\";\n\nexport const SGifContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.7em;\n  margin-bottom: 20px;\n  z-index: 2;\n\n  a {\n    position: absolute;\n    text-decoration: none;\n    color: var(--tertiary-color);\n    display: none;\n    cursor: pointer;\n    transition: var(--ghost-transition-time);\n\n    &:hover {\n      color: var(--secondary-color);\n      font-weight: 700;\n    }\n  }\n\n  &:hover {\n    button {\n      transition: var(--ghost-transition-time);\n      display: block;\n      z-index: 3;\n    }\n\n    a {\n      display: block;\n      z-index: 0;\n    }\n  }\n\n  @media ${device.tablet} {\n    grid-template-columns: 1fr;\n    margin-top: 60px;\n    padding: 0.2em;\n  }\n\n  img {\n    max-width: 100%;\n    margin-bottom: 5px;\n    border-radius: 3px;\n    cursor: pointer;\n\n    &:hover {\n      opacity: 0.9;\n    }\n  }\n`;\n\nexport const SNoResultsFound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 40px;\n  font-size: 1.5em;\n`;\n\nexport const SSaveButton = styled(SButton)`\n  position: absolute;\n  display: none;\n  transition: var(--ghost-transition-time);\n`;\n","import React, { useState, useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\n// Context\nimport { GifsContext } from \"../../../store/GifsProvider\";\nimport { AuthContext } from \"../../../store/AuthProvider\";\n\n// Styles\nimport { SButton } from \"../../../assets/globalStyles/globalStyles\";\nimport {\n  SGifsFlexContainer,\n  SGifsListContainer,\n} from \"../../../assets/globalStyles/containers\";\nimport { SGifContainer, SSaveButton, SNoResultsFound } from \"./styles\";\n\nexport default function GifsResult({ reqStatus, query, select }) {\n  const { gifs, setGifs } = useContext(GifsContext);\n  const { isAuth, user } = useContext(AuthContext);\n  const [fetchedIncrementer, setFetchedIncrementer] = useState(2);\n  const [currentGif, setCurrentGif] = useState({});\n\n  function showGifs() {\n    if (gifs.length > 0) {\n      return (\n        <SGifsListContainer>\n          {gifs.map((item) => {\n            return (\n              <SGifContainer key={item.id}>\n                <img src={item.images.fixed_height.url} alt={item.title} />\n                {isAuth ? (\n                  <SSaveButton onClick={() => saveGif(item)}>\n                    Save{\" \"}\n                    <span role=\"img\" aria-label=\"love\">\n                      ❤️\n                    </span>\n                  </SSaveButton>\n                ) : (\n                  <NavLink to=\"/login\">\n                    Login to save your favorite gifs\n                  </NavLink>\n                )}\n              </SGifContainer>\n            );\n          })}\n        </SGifsListContainer>\n      );\n    } else {\n      return (\n        <SNoResultsFound>\n          <p>0 results founds. Try another keyword :)</p>\n        </SNoResultsFound>\n      );\n    }\n  }\n\n  function saveGif(item) {\n    let isGifRepeated = false;\n    setCurrentGif(item);\n    const handleAjaxRequest = async () => {\n      await user.gifs.forEach((gif) => {\n        if (item.id === gif.id) {\n          isGifRepeated = true;\n        }\n      });\n\n      if (item.id === currentGif.id) {\n        isGifRepeated = true;\n      }\n\n      isGifRepeated\n        ? Swal.fire({\n            title: \"You already saved that gif\",\n          })\n        : await axios({\n            method: \"post\",\n            url: `http://localhost:5000/savegif/${user._id}`,\n            data: item,\n          });\n    };\n    handleAjaxRequest();\n  }\n\n  function showShowMoreGifsButton() {\n    if (gifs.length > 0 && reqStatus) {\n      return <SButton onClick={showMoreGifs}>Show more</SButton>;\n    }\n  }\n\n  let incrementer = fetchedIncrementer;\n\n  function showMoreGifs() {\n    try {\n      incrementer++;\n      setFetchedIncrementer(incrementer);\n      const handleAjaxRequest = async () => {\n        let response = await axios({\n          method: \"post\",\n          url: \"http://localhost:5000/results/\",\n          data: { query, select, fetchedIncrementer },\n        });\n        setGifs([...response.data.data]);\n      };\n      handleAjaxRequest();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <SGifsFlexContainer>\n      {showGifs()}\n      {showShowMoreGifsButton()}\n    </SGifsFlexContainer>\n  );\n}\n","import styled from \"styled-components\";\nimport Input from \"../../components/Form/Input\";\nimport { Form } from \"@unform/web\";\nimport { SButton } from \"../../assets/globalStyles/globalStyles\";\nimport { device } from \"../../assets/globalStyles/device\";\n\nexport const SGhostForm = styled.div`\n  animation: floating 4s ease alternate infinite running;\n  position: relative;\n  margin-top: 20px;\n\n  @media ${device.tablet} {\n    width: 90vw;\n    display: flex;\n    justify-content: center;\n  }\n\n  @keyframes floating {\n    0% {\n      transform: translateY(8px);\n    }\n    100% {\n      transform: translateY(-8px);\n    }\n  }\n`;\n\nexport const SGhostButton = styled(SButton)`\n  padding: 0 10px;\n  background: ${({ isfocused }) =>\n    isfocused ? \"var(--tertiary-color)\" : \"var(--secondary-color)\"};\n  color: ${({ isfocused }) =>\n    isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n\n  @media ${device.tablet} {\n    width: 80vw;\n    padding: 1em;\n  }\n`;\n\nexport const SForm = styled(Form)`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  top: 50%;\n  left: 0;\n  right: 0;\n\n  @media ${device.tablet} {\n    flex-direction: column;\n    width: 90vw;\n    align-items: center;\n  }\n`;\n\nexport const SSelect = styled.select`\n  border: none;\n  border-radius: 5px;\n  background: ${({ isfocused }) =>\n    isfocused ? \"var(--tertiary-color)\" : \"var(--secondary-color)\"};\n  color: ${({ isfocused }) =>\n    isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n  font-weight: 700;\n  font-size: 1.3em;\n  transition: var(--ghost-transition-time);\n\n  @media ${device.tablet} {\n    width: 80vw;\n    margin-bottom: 5px;\n    }\n  }\n`;\n\nexport const SInput = styled(Input)`\n  border: none;\n  border-radius: 5px;\n  margin-bottom: 0;\n  padding: 1em;\n  background: ${({ isfocused }) =>\n    isfocused ? \"var(--tertiary-color)\" : \"var(--secondary-color)\"};\n  color: ${({ isfocused }) =>\n    isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n  font-weight: 700;\n  font-size: 1.3em;\n  transition: var(--ghost-transition-time);\n\n  @media ${device.tablet} {\n    width: 80vw;\n    margin-bottom: 5px;\n  }\n`;\n\nexport const SGhostBody = styled.div`\n  position: relative;\n  height: 250px;\n  width: 150px;\n  background: ${({ isfocused }) =>\n    isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n  border-radius: ${({ isfocused }) =>\n    isfocused ? \"100px 100px 10px 80px\" : \"100px 100px 10px 10px\"};\n  transition: var(--ghost-transition-time);\n\n  @media ${device.tablet} {\n    right: 0;\n    top: 0;\n  }\n\n  /* hands */\n  &::before {\n    content: \"\";\n    display: block;\n    position: absolute;\n    height: 50px;\n    width: 30px;\n    top: 105px;\n    left: 10px;\n    z-index: 99;\n    background: ${({ isfocused }) =>\n      isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n    box-shadow: 0px 6px 5px black;\n    border-radius: 50px;\n    transform: rotate(-30deg);\n    opacity: ${({ isfocused }) => (isfocused ? \"0.5\" : \"1\")};\n  }\n\n  &::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    height: 50px;\n    width: 30px;\n    top: 105px;\n    right: 10px;\n    z-index: 99;\n    background: ${({ isfocused }) =>\n      isfocused ? \"var(--secondary-color)\" : \"var(--tertiary-color)\"};\n    box-shadow: 0px 6px 5px black;\n    border-radius: 50px;\n    transform: rotate(30deg);\n    opacity: ${({ isfocused }) => (isfocused ? \"0.5\" : \"1\")};\n  }\n\n  .face {\n    &::after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      top: 60px;\n      left: 30px;\n      height: 25px;\n      width: 25px;\n      border-radius: 100%;\n      background: ${({ isfocused }) =>\n        isfocused ? \"var(--tertiary-color)\" : \"var(--primary-color)\"};\n    }\n\n    &::before {\n      content: \"\";\n      display: block;\n      position: absolute;\n      top: 60px;\n      right: 30px;\n      height: 25px;\n      width: 25px;\n      border-radius: 100%;\n      background: ${({ isfocused }) =>\n        isfocused ? \"var(--tertiary-color)\" : \"var(--primary-color)\"};\n    }\n\n    .mouth {\n      position: absolute;\n      height: 18px;\n      width: 35px;\n      border: 8px solid\n        ${({ isfocused }) =>\n          isfocused ? \"var(--tertiary-color)\" : \"var(--primary-color)\"};\n      border-bottom-left-radius: 100px;\n      border-bottom-right-radius: 100px;\n      border-top: 0;\n      top: 85px;\n      left: 57px;\n    }\n  }\n`;\n","import React, { useState, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport * as Yup from \"yup\";\n\n// Components\nimport { GifsContext } from \"../../store/GifsProvider\";\nimport GifsResult from \"./GifsResult/index\";\n\n// Styles\nimport { SContainer } from \"../../assets/globalStyles/containers\";\nimport {\n  SGhostForm,\n  SGhostBody,\n  SForm,\n  SInput,\n  SSelect,\n  SGhostButton,\n} from \"./styles\";\n\nexport default function Home() {\n  const formRef = useRef(null);\n  const { setGifs } = useContext(GifsContext);\n  const [query, setQuery] = useState(\"\"); // We need this query state to pass the query to the results component\n  const [reqStatus, setReqStatus] = useState(false);\n  const [select, setSelect] = useState(\"gifs\");\n  const [isFocused, setFocus] = useState(false);\n\n  // Retrieves form data and calls the ajax request to send it to server\n  async function handleSubmit(data, { reset }) {\n    try {\n      Yup.object().shape({\n        query: Yup.string().required(\"Please type something\"),\n      });\n\n      // Sends the query data to backend so it can be used on the giphy's endpoint\n      const handleAjaxRequest = async (data) => {\n        let query = data.query;\n        await setQuery(query); // This is needed to pass the query as props to another component\n        let response = await axios({\n          method: \"post\",\n          url: \"http://localhost:5000/results/\",\n          data: { query, select },\n        });\n        setGifs(response.data.data);\n      };\n      await handleAjaxRequest(data);\n\n      await setReqStatus(true);\n      reset();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  function handleSelectChange(imgType) {\n    setSelect(imgType);\n  }\n\n  function toggleFocus() {\n    setFocus(!isFocused);\n  }\n\n  return (\n    <SContainer>\n      <SGhostForm onFocus={toggleFocus} onBlur={toggleFocus}>\n        <SGhostBody isfocused={isFocused}>\n          <div className=\"face\">\n            <div className=\"mouth\" />\n          </div>\n        </SGhostBody>\n\n        <SForm\n          ref={formRef}\n          onSubmit={handleSubmit}\n          method=\"POST\"\n          action=\"/results\"\n        >\n          <SInput\n            name=\"query\"\n            required\n            placeholder=\"Type anything\"\n            isfocused={isFocused ? 1 : 0}\n          />\n          <SSelect\n            name=\"imgType\"\n            isfocused={isFocused}\n            onChange={(e) => handleSelectChange(e.target.value)}\n          >\n            <option value=\"gifs\">Gifs</option>\n            <option value=\"stickers\">Stickers</option>\n          </SSelect>\n\n          <SGhostButton type=\"submit\" isfocused={isFocused}>\n            Search Gifs\n          </SGhostButton>\n        </SForm>\n      </SGhostForm>\n\n      {/* If the request was sent to the server, it renders the gifs */}\n      {reqStatus && (\n        <GifsResult reqStatus={reqStatus} query={query} select={select} />\n      )}\n    </SContainer>\n  );\n}\n"],"sourceRoot":""}